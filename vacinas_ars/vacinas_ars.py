# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VacinasARS
                                 A QGIS plugin
 Este plugin permite a visualização temporal da vacinação por aRS em Portugal continental.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-21
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Eduarda Ribeiro, Carla Rodrigues
        email                : eduardalopesribeiro@outlook.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .vacinas_ars_dialog import VacinasARSDialog
import os.path

from datetime import datetime
import pandas as pd
import numpy as np

from qgis.PyQt.QtCore import QVariant
from qgis.PyQt.QtCore import QDate

from qgis.core import *
from PyQt5.QtGui import *

class VacinasARS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'VacinasARS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&VacinasARS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('VacinasARS', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/vacinas_ars/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'VacinasARS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&VacinasARS'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = VacinasARSDialog()
            self.dlg.totais.clicked.connect(lambda: self.vacinas_camada("doses"))
            self.dlg.doses1.clicked.connect(lambda: self.vacinas_camada("doses1_perc"))
            self.dlg.doses2.clicked.connect(lambda: self.vacinas_camada("doses2_perc"))

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def config(self, vl, metrica):

        layer_settings  = QgsPalLayerSettings()
        text_format = QgsTextFormat()

        text_format.setFont(QFont("Arial", 12))
        text_format.setSize(10)

        buffer_settings = QgsTextBufferSettings()
        buffer_settings.setEnabled(True)
        buffer_settings.setSize(1)
        buffer_settings.setColor(QColor("white"))

        text_format.setBuffer(buffer_settings)
        layer_settings.setFormat(text_format)

        layer_settings.enabled = True
        if metrica == "doses1_perc" or metrica == "doses2_perc":
            layer_settings.fieldName = """concat("ARS", ' : ', "Doses", '%')"""
        else : 
            layer_settings.fieldName = """concat("ARS", ' : ', "Doses")"""
        layer_settings.isExpression = True

        layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)

        # Set layer name and desired paremeters
        ramp_name = 'Reds'
        value_field = 'Doses'
        num_classes = 5
        classification_method = QgsClassificationEqualInterval()

        format = QgsRendererRangeLabelFormat()
        format.setFormat("%1 - %2")
        format.setPrecision(2)
        format.setTrimTrailingZeroes(True)

        default_style = QgsStyle().defaultStyle()
        color_ramp = default_style.colorRamp(ramp_name)

        renderer = QgsGraduatedSymbolRenderer()
        renderer.setClassAttribute(value_field)
        renderer.setClassificationMethod(classification_method)
        renderer.setLabelFormat(format)
        renderer.updateClasses(vl, num_classes)
        renderer.updateColorRamp(color_ramp)
        
        vl.setLabelsEnabled(True)
        vl.setLabeling(layer_settings)
        vl.setRenderer(renderer)
        vl.triggerRepaint()



    def ARS(self):

        # Camada das ARS
        zipbase = '/vsizip//vsicurl/https://raw.githubusercontent.com/eduardalopesribeiro/SIG/7a8a95526545320c7c413358a6cdc0e0a2fa6e6b/ARS.zip'
        shp_name = 'ARS.shp'
        vl = QgsVectorLayer(f"{zipbase}/ARS/{shp_name}", 'ARS', 'ogr')
        if not vl.isValid():
            print ("Layer failed to load!")
        else:
            return vl

    def vacinas_camada(self, metrica):

        #Informacao vacinas
        url = 'https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/vacinas_detalhe.csv'
        df = pd.read_csv(url, index_col=0)

        #Camada das ARS
        lars = self.ARS()
        flars = lars.getFeatures()

        # Criar nova camada vazia (novo QgsVectorLayer object) para geometria Multipolygon, 
        # com o nome de camada "VacinasARS" e um provedor de dados de memória:
        vl = QgsVectorLayer("MultiPolygon", f"VacinasARS{metrica}", "memory")


        # Depois criamos os campos dos atributos usando a função addAtributes() do dataProvider:
        # 3 colunas -> ARS(String)     Data(Date)     Doses(Int) 
        pr = vl.dataProvider()
        pr.addAttributes([QgsField("ARS", QVariant.String),
                          QgsField("Data",  QVariant.Date),
                          QgsField("Doses", QVariant.Double)])
        vl.updateFields()

        # Inicia-se a edicao da nova camada para adicionar os valores as colunas
        vl.startEditing()

        for ars in flars:
            for data in df.index:
                
                d = QDate.fromString(data, 'dd-MM-yyyy')
                
                if ars["name"] == 'ARS NORTE':
                    val = np.float64(df[f'{metrica}_arsnorte'][data])
                    doses = val.item()


                elif ars["name"] == 'ARS ALGARVE':
                    val = np.float64(df[f'{metrica}_arsalgarve'][data])
                    doses = val.item()
         

                elif ars["name"] == 'ARS ALENTEJO':
                    val = np.float64(df[f'{metrica}_arsalentejo'][data])
                    doses = val.item()


                elif ars["name"] == 'ARS LVT':
                    val = np.float64(df[f'{metrica}_arslvt'][data])
                    doses = val.item()
                

                elif ars["name"] == 'ARS CENTRO':
                    val = np.float64(df[f'{metrica}_arscentro'][data])
                    doses = val.item()

                if metrica == "doses1_perc" or metrica == "doses2_perc":
                    doses = doses * 100
                
                f = QgsFeature()
                f.setGeometry(ars.geometry())
                f.setAttributes( [ars["name"], d , doses])
                pr.addFeature(f)
                vl.updateExtents()

        self.config(vl, metrica)
        QgsProject.instance().addMapLayer(vl)
